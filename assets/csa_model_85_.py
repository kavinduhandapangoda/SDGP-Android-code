# -*- coding: utf-8 -*-
"""CSA Model 85%.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sYNDCd-6qzTMmEVTs7szv4G2ZZIdYbXK
"""

import tensorflow as tf
tf.test.gpu_device_name()

!pip install -q keras

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !wget https://agroscan.loopweb.lk/PetImages.zip
# !unzip PetImages.zip
# !mv PetImages train
# !find train/beetle -size  0 -print0 |xargs -0 rm --
# !find train/fresh -size  0 -print0 |xargs -0 rm --

from glob import glob
from sklearn.model_selection import train_test_split

beetles = glob('train/beetle/*.jpg')
freshs = glob('train/fresh/*.jpg')

fresh_train, fresh_test = train_test_split(freshs, test_size=0.30)
beetle_train, beetle_test = train_test_split(beetles, test_size=0.30)

TRAIN_DIR = 'train'
TEST_DIR = 'test'

!mkdir test

!mkdir test/fresh
files = ' '.join(fresh_test)
!mv -t test/fresh $files

!mkdir test/beetle
files = ' '.join(beetle_test)
!mv -t test/beetle $files

import numpy as np
from PIL import Image
import matplotlib.pyplot as plt

freshs = np.random.choice(fresh_train, 13)
beetles = np.random.choice(beetle_train, 12)
data = np.concatenate((freshs, beetles))
labels = 13 * ['Fresh'] + 12 *['Beetle']

N, R, C = 25, 5, 5
plt.figure(figsize=(12, 9))

for k, (src, label) in enumerate(zip(data, labels)):
    im = Image.open(src).convert('RGB')
    plt.subplot(R, C, k+1)
    plt.title(label)
    plt.imshow(np.asarray(im))
    plt.axis('off')

from keras.models import Model
from keras.layers import Dense, GlobalAveragePooling2D, Dropout
from keras.applications.inception_v3 import InceptionV3, preprocess_input

CLASSES = 2
    
# setup model
base_model = InceptionV3(weights='imagenet', include_top=False)

x = base_model.output
x = GlobalAveragePooling2D(name='avg_pool')(x)
x = Dropout(0.4)(x)
predictions = Dense(CLASSES, activation='softmax')(x)
model = Model(inputs=base_model.input, outputs=predictions)
   
# transfer learning
for layer in base_model.layers:
    layer.trainable = False
      
model.compile(optimizer='rmsprop',
              loss='categorical_crossentropy',
              metrics=['accuracy'])



from keras.preprocessing.image import ImageDataGenerator

WIDTH = 299
HEIGHT = 299
BATCH_SIZE = 32

# data prep
train_datagen = ImageDataGenerator(
    preprocessing_function=preprocess_input,
    rotation_range=40,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest')

validation_datagen = ImageDataGenerator(
    preprocessing_function=preprocess_input,
    rotation_range=40,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest')

train_generator = train_datagen.flow_from_directory(
    TRAIN_DIR,
    target_size=(HEIGHT, WIDTH),
		batch_size=BATCH_SIZE,
		class_mode='categorical')
    
validation_generator = validation_datagen.flow_from_directory(
    TEST_DIR,
    target_size=(HEIGHT, WIDTH),
    batch_size=BATCH_SIZE,
    class_mode='categorical')

x_batch, y_batch = next(train_generator)

plt.figure(figsize=(12, 9))
for k, (img, lbl) in enumerate(zip(x_batch, y_batch)):
    plt.subplot(4, 8, k+1)
    plt.imshow((img + 1) / 2)
    plt.axis('off')

EPOCHS = 10
BATCH_SIZE = 32
STEPS_PER_EPOCH = 6
VALIDATION_STEPS = 64

MODEL_FILE = 'filename.model.h5'

history = model.fit_generator(
    train_generator,
    epochs=EPOCHS,
    steps_per_epoch=STEPS_PER_EPOCH,
    validation_data=validation_generator,
    validation_steps=VALIDATION_STEPS)
  
model.save(MODEL_FILE)

def plot_training(history):
  acc = history.history['accuracy']
  loss = history.history['loss']
  epochs = range(len(acc))
  
  plt.plot(epochs, acc, 'r.')
  plt.title('Training and validation accuracy')
  
  plt.figure()
  plt.plot(epochs, loss, 'r.')
  plt.title('Training and validation loss')
  plt.show()
  
plot_training(history)

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec

from keras.preprocessing import image
from keras.models import load_model
from keras.applications.inception_v3 import preprocess_input


def predict(model, img):
    """Run model prediction on image
    Args:
        model: keras model
        img: PIL format image
    Returns:
        list of predicted labels and their probabilities 
    """
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    x = preprocess_input(x)
    preds = model.predict(x)
    return preds[0]


def plot_preds(img, preds):
    """Displays image and the top-n predicted probabilities in a bar graph
    Args:
        preds: list of predicted labels and their probabilities
    """
    labels = ("beetle", "fresh")
    gs = gridspec.GridSpec(2, 1, height_ratios=[4, 1])
    plt.figure(figsize=(8,8))
    plt.subplot(gs[0])
    plt.imshow(np.asarray(img))
    plt.subplot(gs[1])
    plt.barh([0, 1], preds, alpha=0.5)
    plt.yticks([0, 1], labels)
    plt.xlabel('Probability')
    plt.xlim(0, 1)
    plt.tight_layout()

MODEL_FILE = 'filename.model.h5'
model = load_model(MODEL_FILE)

img = image.load_img('test/fresh/007.jpg', target_size=(299, 299))
preds = predict(model, img)



plot_preds(np.asarray(img), preds)
preds

import tensorflow as tf

# Convert the model
converter = tf.lite.TFLiteConverter.from_saved_model(saved_model_dir) # path to the SavedModel directory
tflite_model = converter.convert()

# Save the model.
with open('model.tflite', 'wb') as f:
  f.write(tflite_model)